stages:
    - adjust 
    - install
    - test
    - miscellaneous


image:
  name: ravilmobile/gemmforge-nvidia:latest
  entrypoint: [""]


before_script:
  - pip3 install -e .
  - pip3 install -r ./requirements.txt


submodules:
  stage: adjust
  tags:
    - atsccs68-docker-executor
  script:
    - cat ./.gitmodules
    - git submodule update --init --recursive
  artifacts:
    paths:
      - submodules


examples:
  stage: test 
  tags:
  -  atsccs68-docker-executor
  parallel:
    matrix:
      - BACKEND: cuda
        MODEL: sm_60
      - BACKEND: oneapi
        MODEL: dg1
      - BACKEND: hip
        MODEL: gfx908
  script:
    - for example in ./examples/*.py; do
        python3 $example -b ${BACKEND} -a ${MODEL} ;
      done ;
    - python3 ./tests/interface/test_loaders_factory.py



.common_test_steps: &common_test_script
    - export CTEST_OUTPUT_ON_FAILURE=1
    - export root_dir=$PWD
    - if [[ "${BACKEND}" == "hipsycl" ]]; then
        export CC=/usr/bin/gcc-9 ;
        export CXX=/usr/bin/g++-9 ;
      else
        export CC=/usr/bin/gcc-8 ;
        export CXX=/usr/bin/g++-8 ;
      fi ;
    - if [[ "${BACKEND}" == "hip" ]]; then
        . /etc/profile.d/rocm.sh ;
        export HIP_PLATFORM=nvidia ;
      fi ;


# NOTE: GPU_MODEL is an env. variable defined in a gitlab-runner config
gemms:
  stage: test
  tags:
  -  atsccs68-docker-executor
  parallel:
    matrix:
      - BACKEND: [cuda, hipsycl, hip]
  script:
    - *common_test_script
    - export curr_dir=./tests/gemms/build
    - mkdir -p $curr_dir && cd $curr_dir
    - for test in ../testsuites/*.yaml; do
        cmake .. -DSM_ARCH=${GPU_MODEL} -DDEVICE_BACKEND=${BACKEND} -DREAL_SIZE=4 -DTEST_SUITE=$test ;
        make -j4 ;
        ./gemm-tests ;
        rm -rf ./* ;
      done ;


csa:
  stage: test
  tags:
  -  atsccs68-docker-executor
  parallel:
    matrix:
      - BACKEND: [cuda, hipsycl, hip]
  script:
    - *common_test_script
    - export curr_dir=./tests/csa/build
    - mkdir -p $curr_dir && cd $curr_dir
    - for test in ../testsuites/*.yaml; do
        cmake .. -DSM_ARCH=${GPU_MODEL} -DDEVICE_BACKEND=${BACKEND} -DREAL_SIZE=4 -DTEST_SUITE=$test ;
        make -j4 ;
        ./csa-tests ;
        rm -rf ./* ;
      done ;


benchmarks:
  stage: test
  tags:
  -  atsccs68-docker-executor
  parallel:
    matrix:
      - BACKEND: [cuda, hipsycl, hip]
  script:
    - *common_test_script
    - for bench in ./benchmarks/*; do
        export curr_dir=$bench/build ;
        mkdir -p $curr_dir && cd $curr_dir ;
        cmake .. -DSM_ARCH=${GPU_MODEL} -DDEVICE_BACKEND=${BACKEND} -DREAL_SIZE=4 ;
        make -j4 ;
        make test ARGS="-V" ;
        cd $root_dir ;
      done ;


pep8:
  stage: miscellaneous
  tags:
  -  atsccs68-docker-executor
  allow_failure: true
  script:
    - pep8 gemmforge


pylint:
  stage: miscellaneous
  tags:
  -  atsccs68-docker-executor
  allow_failure: true
  script:
    - pylint gemmforge


install:
  stage: miscellaneous
  tags:
  -  atsccs68-docker-executor
  parallel:
    matrix:
      - BACKEND: [cuda, hipsycl, hip]
  before_script:
  - pip3 install --user git+https://github.com/ravil-mobile/gemmforge.git@$CI_COMMIT_SHA
  script:
    - export isntall_path=$(python3 -c 'import gemmforge, os; print(os.path.dirname(gemmforge.__file__))')
    - tree $isntall_path
    - export root_dir=$PWD
    - cd ./tests/cmake_integration
    - mkdir -p ./build && cd ./build
    - cmake ..
    - make
    - mkdir $root_dir/localspace && cd $root_dir/localspace
    - for example in ../examples/*.py; do
        python3 $example -b ${BACKEND} -a sm_60 ;
      done
