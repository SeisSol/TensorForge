properties([
    parameters([
        string(
            defaultValue: 'atsccs68_runner',
            description: 'agent name tells where to run a job',
            name: 'AGENT',
            trim: true)
    ]),
    pipelineTriggers([
       [$class: 'GenericTrigger',
        genericVariables: [
         [key: 'ref', value: '$.ref'],
         [key: 'after', value: '$.after'],
         [key: 'clone_url', value: '$.repository.clone_url'],
         [key: 'statuses_url', value: '$.repository.statuses_url'],
         [key: 'github_login', value: '$.repository.owner.login'],
         [key: 'repo', value: '$.repository.name'],
        ],
        printContributedVariables: true,
        printPostContent: true,
        token: 'gemmforge-pip-installation',
       ]
  ])
])


pipeline {
    agent {label "${env.AGENT}"}

    stages {
        stage('NotifyGithub') {
            steps {
                githubNotify account: github_login, context: 'Gemmforge pip Installation', credentialsId: 'forge-github-notify',
                    description: 'Checking to install with pip...', repo: repo, sha: after, status: 'PENDING'
            }
        }
        stage('CleanWorkspace') {
            steps {
                deleteDir()
            }
        }

        stage('Clone') {
            steps {
                script {
                    filter = "${ref}".split("refs/(heads|tags)/")
                    branch = filter[1]
                }
                echo "fetching: ${branch}"
                sh """
                git clone --branch ${branch} --recurse-submodules ${clone_url} .
                """
            }
        }

        stage('InstallFromGithub') {
            steps {
                script {
                    testImage = docker.build("gfinstall:latest", ". -f ./.ci/docker/Dockerfile.python --build-arg BRANCH=${branch}")
                    testImage.inside() {
                        sh """
                        set -eu pipefail

                        path=\$(python3 -c \'import gemmforge, os; print(os.path.dirname(gemmforge.__file__))\')
                        tree \$path


                        cd ./tests/cmake_integration
                        mkdir -p ./build && cd ./build
                        cmake ..
                        make


                        cd /localspace
                        echo test examples
                        for example in /workspace/examples/*.py; do
                            python3 \$example
                        done
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker rmi -f $(docker images -f "dangling=true" -q)'
        }
        success {
            githubNotify account: github_login, context: 'Gemmforge pip Installation', credentialsId: 'forge-github-notify',
            description: 'Gemmforge pip installation succeed!', repo: repo, sha: after, status: 'SUCCESS'
        }
        failure {
            githubNotify account: github_login, context: 'Gemmforge pip Installation',
            credentialsId: 'forge-github-notify', description: 'Gemmforge pip installation failed :(',
            repo: repo, sha: after, status: 'FAILURE'
        }
    }
}
