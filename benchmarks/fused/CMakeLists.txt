cmake_minimum_required(VERSION 3.5)
project(bench)

set(REFERENCE_IMPL "GEMMGEN" CACHE STRING "size of the floating point data type")
set_property(CACHE REFERENCE_IMPL PROPERTY STRINGS "GEMMGEN" "OPENBLAS")

# generated by python (locates in the build)
include(${PROJECT_SOURCE_DIR}/tmp/cmake_params.cmake)

if (${BACKEND} STREQUAL "cuda")
  find_package(CUDA REQUIRED)
  set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};
          -std=c++11;
          -arch=${ARCH};
          #-restrict;
          -res-usage;
          -O3;
          #-g;
          -lineinfo;
          -Xptxas -v;
          -maxrregcount 90;
          -DREAL_SIZE=${REAL_SIZE})

  cuda_add_executable(${CMAKE_PROJECT_NAME} ./tmp/main.cu
                                            ./tmp/kernel.cu
                                            ./common/aux.cpp
                                            ./common/gemm.cpp
                                            ../tensorforge/include/tensorforge_aux.cu)
  target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE CUDA_UNDERHOOD)
elseif(${BACKEND} STREQUAL "hip")
  if(NOT DEFINED HIP_PATH)
    if(NOT DEFINED ENV{HIP_PATH})
      set(HIP_PATH "/opt/rocm/hip" CACHE PATH "Path to which HIP has been installed")
    else()
      set(HIP_PATH $ENV{HIP_PATH} CACHE PATH "Path to which HIP has been installed")
    endif()
  endif()

  #set the CMAKE_MODULE_PATH for the helper cmake files from HIP
  set(CMAKE_MODULE_PATH "${HIP_PATH}/cmake" ${CMAKE_MODULE_PATH})

  set(GPU_TARGETS ${ARCH})
  find_package(HIP REQUIRED)
  set(DEVICE_SRC ./tmp/main.cpp
                 ./tmp/kernel.cpp
                 ./common/aux.cpp
                 ./common/gemm.cpp
                 ../tensorforge/include/tensorforge_aux.hip.cpp)

  set_source_files_properties(${DEVICE_SRC} PROPERTIES HIP_SOURCE_PROPERTY_FORMAT 1)
  set(_HIPCC --offload-arch=${ARCH}; -std=c++14; -O3)

  hip_add_executable(${CMAKE_PROJECT_NAME} ${DEVICE_SRC} HIPCC_OPTIONS ${_HIPCC})
  target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE ${HIP_PATH}/lib/libamdhip64.so)
  target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE HIP_UNDERHOOD)
  set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY HIP_ARCHITECTURES ${ARCH})
else()
  message(FATAL_ERROR "unknown backend provided: ${BACKEND}")
endif()


target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE ./common
                                                         ../tensorforge/include)
target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE "CONCRETE_CPU_BACKEND=${REFERENCE_IMPL}"
                                                         "REAL_SIZE=${REAL_SIZE}")

if (${REFERENCE_IMPL} STREQUAL "OPENBLAS")
  find_package(OpenBLAS REQUIRED)
  target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE ${OpenBLAS_INCLUDE_DIRS})
  target_link_libraries(${CMAKE_PROJECT_NAME} ${OpenBLAS_LIBRARIES})
endif()
